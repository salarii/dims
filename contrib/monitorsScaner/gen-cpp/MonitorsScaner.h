/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MonitorsScaner_H
#define MonitorsScaner_H

#include <thrift/TDispatchProcessor.h>
#include "monitorsScaner_types.h"

namespace monitorsScaner {

class MonitorsScanerIf {
 public:
  virtual ~MonitorsScanerIf() {}
  virtual void getInfo(Data& _return, const InfoRequest& infoRequest) = 0;
};

class MonitorsScanerIfFactory {
 public:
  typedef MonitorsScanerIf Handler;

  virtual ~MonitorsScanerIfFactory() {}

  virtual MonitorsScanerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MonitorsScanerIf* /* handler */) = 0;
};

class MonitorsScanerIfSingletonFactory : virtual public MonitorsScanerIfFactory {
 public:
  MonitorsScanerIfSingletonFactory(const boost::shared_ptr<MonitorsScanerIf>& iface) : iface_(iface) {}
  virtual ~MonitorsScanerIfSingletonFactory() {}

  virtual MonitorsScanerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MonitorsScanerIf* /* handler */) {}

 protected:
  boost::shared_ptr<MonitorsScanerIf> iface_;
};

class MonitorsScanerNull : virtual public MonitorsScanerIf {
 public:
  virtual ~MonitorsScanerNull() {}
  void getInfo(Data& /* _return */, const InfoRequest& /* infoRequest */) {
    return;
  }
};

typedef struct _MonitorsScaner_getInfo_args__isset {
  _MonitorsScaner_getInfo_args__isset() : infoRequest(false) {}
  bool infoRequest;
} _MonitorsScaner_getInfo_args__isset;

class MonitorsScaner_getInfo_args {
 public:

  MonitorsScaner_getInfo_args() {
  }

  virtual ~MonitorsScaner_getInfo_args() throw() {}

  InfoRequest infoRequest;

  _MonitorsScaner_getInfo_args__isset __isset;

  void __set_infoRequest(const InfoRequest& val) {
    infoRequest = val;
  }

  bool operator == (const MonitorsScaner_getInfo_args & rhs) const
  {
    if (!(infoRequest == rhs.infoRequest))
      return false;
    return true;
  }
  bool operator != (const MonitorsScaner_getInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorsScaner_getInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MonitorsScaner_getInfo_pargs {
 public:


  virtual ~MonitorsScaner_getInfo_pargs() throw() {}

  const InfoRequest* infoRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MonitorsScaner_getInfo_result__isset {
  _MonitorsScaner_getInfo_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _MonitorsScaner_getInfo_result__isset;

class MonitorsScaner_getInfo_result {
 public:

  MonitorsScaner_getInfo_result() {
  }

  virtual ~MonitorsScaner_getInfo_result() throw() {}

  Data success;
  Exception e;

  _MonitorsScaner_getInfo_result__isset __isset;

  void __set_success(const Data& val) {
    success = val;
  }

  void __set_e(const Exception& val) {
    e = val;
  }

  bool operator == (const MonitorsScaner_getInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MonitorsScaner_getInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorsScaner_getInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MonitorsScaner_getInfo_presult__isset {
  _MonitorsScaner_getInfo_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _MonitorsScaner_getInfo_presult__isset;

class MonitorsScaner_getInfo_presult {
 public:


  virtual ~MonitorsScaner_getInfo_presult() throw() {}

  Data* success;
  Exception e;

  _MonitorsScaner_getInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MonitorsScanerClient : virtual public MonitorsScanerIf {
 public:
  MonitorsScanerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MonitorsScanerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getInfo(Data& _return, const InfoRequest& infoRequest);
  void send_getInfo(const InfoRequest& infoRequest);
  void recv_getInfo(Data& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MonitorsScanerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MonitorsScanerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MonitorsScanerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MonitorsScanerProcessor(boost::shared_ptr<MonitorsScanerIf> iface) :
    iface_(iface) {
    processMap_["getInfo"] = &MonitorsScanerProcessor::process_getInfo;
  }

  virtual ~MonitorsScanerProcessor() {}
};

class MonitorsScanerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MonitorsScanerProcessorFactory(const ::boost::shared_ptr< MonitorsScanerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MonitorsScanerIfFactory > handlerFactory_;
};

class MonitorsScanerMultiface : virtual public MonitorsScanerIf {
 public:
  MonitorsScanerMultiface(std::vector<boost::shared_ptr<MonitorsScanerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MonitorsScanerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MonitorsScanerIf> > ifaces_;
  MonitorsScanerMultiface() {}
  void add(boost::shared_ptr<MonitorsScanerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getInfo(Data& _return, const InfoRequest& infoRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getInfo(_return, infoRequest);
    }
    ifaces_[i]->getInfo(_return, infoRequest);
    return;
  }

};

} // namespace

#endif
