/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef monitorsScaner_TYPES_H
#define monitorsScaner_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace monitorsScaner {

struct NetworkType {
  enum type {
    TESTNET = 1,
    MAIN = 2
  };
};

extern const std::map<int, const char*> _NetworkType_VALUES_TO_NAMES;

struct Info {
  enum type {
    TRACKERS_INFO = 1,
    MONITORS_INFO = 2
  };
};

extern const std::map<int, const char*> _Info_VALUES_TO_NAMES;

typedef std::vector<double>  Vector;

typedef struct _InfoRequest__isset {
  _InfoRequest__isset() : networkType(false), info(false), key(false) {}
  bool networkType;
  bool info;
  bool key;
} _InfoRequest__isset;

class InfoRequest {
 public:

  static const char* ascii_fingerprint; // = "320A4E0A7D1C541E521D7F65F2108F77";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x0A,0x4E,0x0A,0x7D,0x1C,0x54,0x1E,0x52,0x1D,0x7F,0x65,0xF2,0x10,0x8F,0x77};

  InfoRequest() : networkType((NetworkType::type)0), info((Info::type)0), key() {
  }

  virtual ~InfoRequest() throw() {}

  NetworkType::type networkType;
  Info::type info;
  std::string key;

  _InfoRequest__isset __isset;

  void __set_networkType(const NetworkType::type val) {
    networkType = val;
  }

  void __set_info(const Info::type val) {
    info = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const InfoRequest & rhs) const
  {
    if (!(networkType == rhs.networkType))
      return false;
    if (!(info == rhs.info))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const InfoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InfoRequest &a, InfoRequest &b);

typedef struct _Exception__isset {
  _Exception__isset() : msg(false) {}
  bool msg;
} _Exception__isset;

class Exception : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Exception() : msg() {
  }

  virtual ~Exception() throw() {}

  std::string msg;

  _Exception__isset __isset;

  void __set_msg(const std::string& val) {
    msg = val;
  }

  bool operator == (const Exception & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Exception &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Exception & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Exception &a, Exception &b);

typedef struct _Data__isset {
  _Data__isset() : rows(false), cols(false), data(false) {}
  bool rows;
  bool cols;
  bool data;
} _Data__isset;

class Data {
 public:

  static const char* ascii_fingerprint; // = "4FB913456A1C0826B937721827BFAF5F";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0xB9,0x13,0x45,0x6A,0x1C,0x08,0x26,0xB9,0x37,0x72,0x18,0x27,0xBF,0xAF,0x5F};

  Data() : rows(0), cols(0) {
  }

  virtual ~Data() throw() {}

  int64_t rows;
  int64_t cols;
  std::vector<std::string>  data;

  _Data__isset __isset;

  void __set_rows(const int64_t val) {
    rows = val;
  }

  void __set_cols(const int64_t val) {
    cols = val;
  }

  void __set_data(const std::vector<std::string> & val) {
    data = val;
  }

  bool operator == (const Data & rhs) const
  {
    if (!(rows == rhs.rows))
      return false;
    if (!(cols == rhs.cols))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Data &a, Data &b);

} // namespace

#endif
